// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  email         String   @unique
  passwordHash  String
  name          String
  role          Role     @default(CUSTOMER)
  bookings      Booking[]
  orders        Order[]
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

model Hotel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  address   String
  city      String
  country   String
  rooms     Room[]
}

model Room {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  hotel         Hotel      @relation(fields: [hotelId], references: [id])
  hotelId       String
  number        String
  type          RoomType
  pricePerNight Int
  isAvailable   Boolean    @default(true)
  bookings      Booking[]
  orders        Order[]
}

enum RoomType {
  SINGLE
  DOUBLE
  SUITE
}

model Booking {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  room        Room     @relation(fields: [roomId], references: [id])
  roomId      String
  checkIn     DateTime
  checkOut    DateTime
  status      BookingStatus @default(PENDING)
  totalPrice  Int
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model MenuItem {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  price       Int
  isAvailable Boolean @default(true)
  category    MenuCategory
  orders      OrderItem[]
}

enum MenuCategory {
  STARTER
  MAIN
  DESSERT
  DRINK
}

model Order {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  status      OrderStatus @default(RECEIVED)
  totalPrice  Int
  room        Room?    @relation(fields: [roomId], references: [id])
  roomId      String?
}

enum OrderStatus {
  RECEIVED
  IN_PROGRESS
  READY
  DELIVERED
  CANCELLED
}

model OrderItem {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  order      Order     @relation(fields: [orderId], references: [id])
  orderId    String
  menuItem   MenuItem  @relation(fields: [menuItemId], references: [id])
  menuItemId String
  quantity   Int       @default(1)
  unitPrice  Int
}
